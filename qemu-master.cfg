# -*- python -*-
# ex: set syntax=python:

###
# buildermaster config file from buildbot.b1-systems.de
# author: Daniel Gollub <gollub@b1-systems.de>
# author: Christian Berendt <berendt@b1-systems.de>
##

####
# Namenschema: 

#builders.append({
#  'name': 'FACTORYNAME-ARCHITEKTUR{-DISTRIBUTION}{-VERSION}',
#  'slavenames': bots-ARCHITEKTUR{-DISTRIBUTION}{-VERSION},
#  'builddir': 'FACOTRYNAME-ARCHITEKTUR{-DISTRIBUTION}{-VERSION}',
#  'factory': f_FACTORYNAME
#})

# Slave Admins:
# b1 -> Christian Berendt, Daniel Gollub
# ...

# Botname:
# ADMIN-PROJECT-1
# ADMIN-PROJECT-2
# ...

####

from database_authority import *

c = BuildmasterConfig = {}

####### PROJECT IDENTITY
c['projectName'] = "qemu"
c['projectURL'] = "http://qemu.org"
c['buildbotURL'] = "http://buildbot.b1-systems.de/qemu/"

from buildbot.steps.source import Git

emailAddressFrom = "qemu@buildbot.b1-systems.de"
#emailAddressesNotify = ["gollub@b1-systems.de"] # gollub is only in there for testing purposes
emailAddressesNotify = ["gollub@b1-systems.de", "qemu-devel@nongnu.org", "agraf@suse.de", "lcapitulino@redhat.com"]

####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus("tcp:3030:interface=127.0.0.1"))
#c['status'].append(html.Waterfall("tcp:3031:interface=127.0.0.1"))

from buildbot.status import mail
c['status'].append(
  mail.MailNotifier(
    fromaddr=emailAddressFrom,
    mode='problem', # only send mail about a build which failed when the previous build passed
    extraRecipients=emailAddressesNotify,
    sendToInterestedUsers=False
  )
)

#####################################################################
# BUILDSLAVES

c['slaves'] = database_authority

#bots_i386_debian_6_0 = ["b1_qemu_2", "yuzuki"]
bots_i386_debian_6_0 = ["yuzuki"]
bots_i386_debian = bots_i386_debian_6_0

bots_i386 = bots_i386_debian

#bots_x86_64_debian_6_0 = ["b1_qemu_1", "yuzuki"]
bots_x86_64_debian_6_0 = ["yuzuki"]
bots_x86_64_debian = bots_x86_64_debian_6_0

bots_x86_64 = bots_x86_64_debian

# arm branches bots
bots_arm = ["yuzuki"]

#bots_solaris11express_sparc = ["palle_sol11express"]
bots_solaris11express_sparc = []

bots_s390 = ["qemu-s390.opensuse.org"]

bots_ppc = ["qemu-ppc.opensuse.org"]

# openBSD
bots_openbsd49 = ["kraxel_openbsd49"]
bots_openbsd_current = ["brad_openbsd_current"]

# RHEL6.1
bots_i386_rhel61 = ["kraxel_rhel61_32bit"]
bots_x86_64_rhel61 = ["kraxel_rhel61"]

bots_x86_64_rhel5 = ["kraxel_rhel5"]

# Fedora 16
bots_x86_64_fedora16 = ["kraxel_fedora16"]

# MinGW32
bots_mingw32 = ["kraxel_rhel61"] 

bots_macosx = ["MacOSX-10.5"]


# xen 4.0
bots_xen40 = ["anthony_xen"]

# xen 4.1
bots_xen41 = ["anthony_xen"]

# xen 4.2
bots_xen42 = ["anthony_xen"]

# xen unstable
bots_xen_unstable = ["anthony_xen"]




# max_builds = 2 # limits to two concurrent builds

c['slavePortnum'] = 9992

#####################################################################
# CHANGESOURCES

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

#####################################################################
# SCHEDULERS

from buildbot.scheduler import Scheduler, Periodic, Nightly, AnyBranchScheduler

default_builders = [
 "default_x86_64_debian_6_0",
 "default_i386_debian_6_0",
 "default_solaris11express_sparc",
 "default_s390",
 "default_ppc",
 "default_openbsd_current",
 "default_openbsd_4.9",
 "default_x86_64_rhel61",
 "default_i386_rhel61",
 "default_x86_64_rhel5",
 "default_x86_64_fedora16",
 "default_mingw32",

## Out of Tree Builders ##
 "default_x86_64_out_of_tree",
 "default_i386_out_of_tree",
]

disable_kvm_builders = [
 "disable_kvm_x86_64_debian_6_0",
 "disable_kvm_i386_debian_6_0",

## Out of Tree Builders ##
 "disable_kvm_x86_64_out_of_tree",
 "disable_kvm_i386_out_of_tree",
]

block_builders = [
  "block_x86_64_debian_6_0",
  "block_i386_debian_6_0",
  "block_openbsd_current",
  "block_openbsd_4.9",
  "block_mingw32",
]

pci_builders = [
  "pci_x86_64_debian_6_0",
  "pci_i386_debian_6_0",
]

virtfs_builders = [
  "virtfs_x86_64_debian_6_0",
  "virtfs_i386_debian_6_0",
]

qmp_builders = [
  "qmp_x86_64_debian_6_0",
  "qmp_i386_debian_6_0",
]

#monitor_builders = [
#  "monitor_x86_64_debian_6_0",
#  "monitor_i386_debian_6_0",
#]


trivialp_builders = [
  "trivial-patches_x86_64_debian_6_0",
  "trivial-patches_i386_debian_6_0",
]

xen_builders = [
  "xen_x86_64_debian_6_0",
  "xen_i386_debian_6_0",
]

xen40_builders = [
  "xen40",
]

xen41_builders = [
  "xen41",
]

xen42_builders = [
  "xen42",
]

xen_unstable_builders = [
  "xen_unstable",
]

s390_builders = [
  "s390-next_x86_64_debian_6_0",
  "s390-next_i386_debian_6_0",
]

ppc_builders = [
  "ppc-next_x86_64_debian_6_0",
  "ppc-next_i386_debian_6_0",
]

macosx_builders = [
 "default_i386_macosx",
]

arm_devs_builders_next = [
 "default_arm_devs_next",
]

target_arm_builders_next = [
 "default_target_arm_next"
]

testBuilders = [
 "default_x86_64_debian_6_0",
 "default_i386_debian_6_0",
 "disable_kvm_x86_64_debian_6_0",
 "disable_kvm_i386_debian_6_0",
## Out of Tree Builders ##
 "default_x86_64_out_of_tree",
 "default_i386_out_of_tree",
 "disable_kvm_x86_64_out_of_tree",
 "disable_kvm_i386_out_of_tree",
## block
  "block_x86_64_debian_6_0",
  "block_i386_debian_6_0",
##pci
  "pci_x86_64_debian_6_0",
  "pci_i386_debian_6_0",
##qmp
  "qmp_x86_64_debian_6_0",
  "qmp_i386_debian_6_0",
###monitor
#  "monitor_x86_64_debian_6_0",
#  "monitor_i386_debian_6_0",
##trivialp
  "trivial-patches_x86_64_debian_6_0",
  "trivial-patches_i386_debian_6_0",
##xen
  "xen_x86_64_debian_6_0",
  "xen_i386_debian_6_0",
##s390
  "s390-next_x86_64_debian_6_0",
  "s390-next_i386_debian_6_0",
##ppc
  "ppc-next_x86_64_debian_6_0",
  "ppc-next_i386_debian_6_0",
]


c['schedulers'] = []

# Nightly

c['schedulers'].append(
  Nightly(
    name="nightly_default",
    branch="master",
    builderNames=default_builders,
    hour=23, minute=3
  )
)

c['schedulers'].append(
  Nightly(
    name="nightly_default_5oclock",
    branch="master",
    builderNames=macosx_builders,
    hour=5, minute=0
  )
)

# 
#  git://git.linaro.org/people/pmaydell/qemu-arm.git target-arm.next
#  git://git.linaro.org/people/pmaydell/qemu-arm.git arm-devs.next
#

c['schedulers'].append(
  Nightly(
    name="nightly_target-arm.next",
    branch="target-arm.next",
    builderNames=target_arm_builders_next,
    hour=5, minute=30
  )
)

c['schedulers'].append(
  Nightly(
    name="nightly_arm-devs.next",
    branch="arm-devs.next",
    builderNames=arm_devs_builders_next,
    hour=5, minute=30
  )
)


c['schedulers'].append(
  Nightly(
    name="nightly_disable_kvm",
    branch="master",
    builderNames=disable_kvm_builders,
    hour=0, minute=3
  )
)

c['schedulers'].append(
  Nightly(
    name="nightly_block",
    branch="block",
    builderNames=block_builders,
    hour=1, minute=3
  )
)


c['schedulers'].append(
  Nightly(
    name="nightly_pci",
    branch="pci",
    builderNames=pci_builders,
    hour=2, minute=3
  )
)

c['schedulers'].append(
  Nightly(
    name="nightly_qmp",
    branch="queue/qmp",
    builderNames=qmp_builders,
    hour=3, minute=3
  )
)

#c['schedulers'].append(
#  Nightly(
#    name="nightly_monitor",
#    branch="queue/monitor",
#    builderNames=monitor_builders,
#    hour=4, minute=3
#  )
#)

c['schedulers'].append(
  Nightly(
    name="nightly_trivial-patches",
    branch="trivial-patches",
    builderNames=trivialp_builders,
    hour=5, minute=3
  )
)

c['schedulers'].append(
  Nightly(
    name="nightly_xen_next",
    branch="xen-next",
    builderNames=xen_builders,
    hour=5, minute=30
  )
)

c['schedulers'].append(
  Nightly(
    name="nightly_xen40",
    branch="master",
    builderNames=xen40_builders,
    hour=6, minute=3
  )
)

c['schedulers'].append(
  Nightly(
    name="nightly_xen41",
    branch="master",
    builderNames=xen41_builders,
    hour=6, minute=30
  )
)

c['schedulers'].append(
  Nightly(
    name="nightly_xen42",
    branch="master",
    builderNames=xen42_builders,
    hour=9, minute=00
  )
)


c['schedulers'].append(
  Nightly(
    name="nightly_xen_unstable",
    branch="master",
    builderNames=xen_unstable_builders,
    hour=7, minute=3
  )
)

c['schedulers'].append(
  Nightly(
    name="nightly_ppc-next",
    branch="ppc-next",
    builderNames=ppc_builders,
    hour=8, minute=3
  )
)

c['schedulers'].append(
  Nightly(
    name="nightly_s390-next",
    branch="s390-next",
    builderNames=s390_builders,
    hour=9, minute=3
  )
)

c['schedulers'].append(
  Nightly(
    name="nightly_virtfs",
    branch="for-upstream",
    builderNames=virtfs_builders,
    hour=8, minute=30
  )
)

c['schedulers'].append(
  Nightly(
    name="nigthly_default_",
    branch="ppc-next",
    builderNames=ppc_builders,
    hour=8, minute=3
  )
)



# AnyBranchScheduler

c['schedulers'].append(
  AnyBranchScheduler(
    name="default",
    branches=["master", "staging", "stable-0.14", "stable-0.13", "stable-0.12"],
    treeStableTimer=7200,
    builderNames=default_builders
  )
)

c['schedulers'].append(
  AnyBranchScheduler(
    name="disable-kvm",
    branches=["master", "staging", "stable-0.13", "stable-0.12"],
    treeStableTimer=7200,
    builderNames=disable_kvm_builders
  )
)

c['schedulers'].append(
  AnyBranchScheduler(
    name="block",
    branches=["block"],
    treeStableTimer=7200,
    builderNames=block_builders
  )
)

c['schedulers'].append(
  AnyBranchScheduler(
    name="pci",
    branches=["pci"],
    treeStableTimer=7200,
    builderNames=pci_builders
  )
)

c['schedulers'].append(
  AnyBranchScheduler(
    name="virtfs",
    branches=["for-upstream"],
    treeStableTimer=7200,
    builderNames=virtfs_builders
  )
)


c['schedulers'].append(
  AnyBranchScheduler(
    name="qmp",
    branches=["queue/qmp"],
    treeStableTimer=7200,
    builderNames=qmp_builders
  )
)

#c['schedulers'].append(
#  AnyBranchScheduler(
#    name="monitor",
#    branches=["queue/monitor"],
#    treeStableTimer=7200,
#    builderNames=monitor_builders
#  )
#)

c['schedulers'].append(
  AnyBranchScheduler(
    name="trivial-patches",
    branches=["trivial-patches"],
    treeStableTimer=7200,
    builderNames=trivialp_builders
  )
)


c['schedulers'].append(
  AnyBranchScheduler(
    name="xen",
    branches=["xen-next"],
    treeStableTimer=7200,
    builderNames=xen_builders
  )
)

c['schedulers'].append(
  AnyBranchScheduler(
    name="xen40",
    branches=["master"],
    treeStableTimer=7200,
    builderNames=xen40_builders
  )
)

c['schedulers'].append(
  AnyBranchScheduler(
    name="xen41",
    branches=["master"],
    treeStableTimer=7200,
    builderNames=xen41_builders
  )
)

c['schedulers'].append(
  AnyBranchScheduler(
    name="xen42",
    branches=["master"],
    treeStableTimer=7200,
    builderNames=xen42_builders
  )
)

c['schedulers'].append(
  AnyBranchScheduler(
    name="xen_unstable",
    branches=["master"],
    treeStableTimer=7200,
    builderNames=xen_unstable_builders
  )
)

c['schedulers'].append(
  AnyBranchScheduler(
    name="s390-next",
    branches=["s390-next"],
    treeStableTimer=7200,
    builderNames=s390_builders
  )
)


c['schedulers'].append(
  AnyBranchScheduler(
    name="ppc",
    branches=["ppc-next"],
    treeStableTimer=7200,
    builderNames=ppc_builders
  )
)

#c['schedulers'].append(
#  Scheduler(
#    name="all",
#    branch="master",
#    treeStableTimer=1200,
#    builderNames=allDefaultBuilders
#  )
#)

### try: Scheduler

### temp. disabled since we got a couple of new buildslaves with new maintainers.
### FIXME: need to check back with new maintainers are O.K. with try-scheduler running
### on their buildslaves ... (gollub)

# from buildbot.scheduler import Try_Userpass
# try_sched = Try_Userpass(
#   "try_command",
#   testBuilders,
#   port=8034,
#   userpass=database_authority_try
# )
# 
# c['schedulers'].append(try_sched)

################################################
## Locks

## Lock to avoid multiple builds of qemu-kvm on slow/tiny
## buildslaves

from buildbot.locks import SlaveLock, MasterLock 
slow_lock = SlaveLock("cpu")

# Only perform one git fetch per repo. For two reasons:
# - do not stress the repos
# - do not stress VMs which host several buildslaves
git_fetch_qemuorg_lock = MasterLock("fetch_git_qemuorg", 1)
git_fetch_repoorcz_lock = MasterLock("fetch_git_repoorcz", 1)
git_fetch_kernelorg_lock = MasterLock("fetch_git_kernelorg", 1)
git_fetch_github_lock = MasterLock("fetch_git_github", 1)
git_fetch_linaro_lock = MasterLock("fetch_git_linaro", 1)



#####################################################################
# FACTORIES

from buildbot.process import factory
from buildbot.steps import shell
from buildbot.steps.shell import Configure, Compile, ShellCommand, Test

## ffactory.GNUAuoconf cannot overwrite env for build targets or so ...
## just configure Env ... useless.
#f_default = factory.GNUAutoconf(
#  source=repository,
#  configureEnv={'LANG': 'C'},
#  test=None
#)
#
#f_disable_kvm = factory.GNUAutoconf(
#  source=repository,
#  configureFlags=["--disable-kvm"],
#  configureEnv={'LANG': 'C'},
#  test=None
#)

f_default = factory.BuildFactory()
f_default.addStep(Git(repourl="git://git.qemu-project.org/qemu.git", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_qemuorg_lock.access('exclusive')]))
f_default.addStep(Configure(command="./configure", env={'LANG': 'C'}))
f_default.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))
f_default.addStep(Test(command=["make", "check"], env={'LANG': 'C'}, maxTime=2400))

f_disable_kvm = factory.BuildFactory()
f_disable_kvm.addStep(Git(repourl="git://git.qemu-project.org/qemu.git", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_qemuorg_lock.access('exclusive')]))
f_disable_kvm.addStep(Configure(command="./configure --disable-kvm", env={'LANG': 'C'}))
f_disable_kvm.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

###
# f_out_of_tree_default: mkdir outoftree; cd outoftree; ../configure
f_out_of_tree_default = factory.BuildFactory()
f_out_of_tree_default.addStep(Git(repourl="git://git.qemu-project.org/qemu.git", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_qemuorg_lock.access('exclusive')]))
f_out_of_tree_default.addStep(ShellCommand(command="mkdir -p outoftree", env={'LANG': 'C'}))
f_out_of_tree_default.addStep(Configure(command="cd outoftree; ../configure", env={'LANG': 'C'}))
f_out_of_tree_default.addStep(Compile(command="cd outoftree; make", env={'LANG': 'C'}, timeout=2400))

# f_out_of_tree_disable_kvm: mkdir outoftree; cd outoftree; ../configure --disable-kvm
f_out_of_tree_disable_kvm = factory.BuildFactory()
f_out_of_tree_disable_kvm.addStep(Git(repourl="git://git.qemu-project.org/qemu.git", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_qemuorg_lock.access('exclusive')]))
f_out_of_tree_disable_kvm.addStep(ShellCommand(command="mkdir -p outoftree", env={'LANG': 'C'}))
f_out_of_tree_disable_kvm.addStep(Configure(command="cd outoftree; ../configure --disable-kvm", env={'LANG': 'C'}))
f_out_of_tree_disable_kvm.addStep(Compile(command="cd outoftree; make", env={'LANG': 'C'}, timeout=2400))

# anessh / branch: for-upstream
f_virtfs = factory.BuildFactory()
f_virtfs.addStep(Git(repourl="git://github.com/kvaneesh/qemu.git", branch="for-upstream", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_github_lock.access('exclusive')]))
f_virtfs.addStep(Configure(command="./configure", env={'LANG': 'C'}))
f_virtfs.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

# block - kwolf / branch: block
f_block = factory.BuildFactory()
f_block.addStep(Git(repourl="git://repo.or.cz/qemu/kevin.git", branch="block", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_repoorcz_lock.access('exclusive')]))
f_block.addStep(Configure(command="./configure", env={'LANG': 'C'}))
f_block.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

f_block_openbsd = factory.BuildFactory()
f_block_openbsd.addStep(Git(repourl="git://repo.or.cz/qemu/kevin.git", branch="block", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_repoorcz_lock.access('exclusive')]))
f_block_openbsd.addStep(ShellCommand(command=["./configure", "--extra-cflags=-Wno-redundant-decls"], env={'LANG': 'C'}))
f_block_openbsd.addStep(Compile(command=["gmake", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

f_block_mingw32 = factory.BuildFactory()
f_block_mingw32.addStep(Git(repourl="git://repo.or.cz/qemu/kevin.git", branch="block", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_repoorcz_lock.access('exclusive')]))
f_block_mingw32.addStep(Configure(command=["./configure", "--cross-prefix=i686-pc-mingw32-"], env={'LANG': 'C'}))
f_block_mingw32.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

# pci - mst / branch: pci
f_pci = factory.BuildFactory()
f_pci.addStep(Git(repourl="git://github.com/mstsirkin/qemu.git", branch="pci", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_github_lock.access('exclusive')]))
f_pci.addStep(Configure(command="./configure", env={'LANG': 'C'}))
f_pci.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

# qmp - luiz / branch: qmp 
f_qmp = factory.BuildFactory()
f_qmp.addStep(Git(repourl="git://repo.or.cz/qemu/qmp-unstable.git", branch="queue/qmp", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_repoorcz_lock.access('exclusive')]))
f_qmp.addStep(Configure(command="./configure", env={'LANG': 'C'}))
f_qmp.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

## monitor - luiz / branch: monitor 
#f_monitor = factory.BuildFactory()
#f_monitor.addStep(Git(repourl="git://repo.or.cz/qemu/qmp-unstable.git", branch="queue/monitor", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_repoorcz_lock.access('exclusive')]))
#f_monitor.addStep(Configure(command="./configure", env={'LANG': 'C'}))
#f_monitor.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

# trivial-patches - stefanha / branch: trivial-patches
f_trivialp = factory.BuildFactory()
f_trivialp.addStep(Git(repourl="git://repo.or.cz/qemu/stefanha.git", branch="trivial-patches", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_repoorcz_lock.access('exclusive')]))
f_trivialp.addStep(Configure(command="./configure", env={'LANG': 'C'}))
f_trivialp.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

# agraf / s390-next
f_s390 = factory.BuildFactory()
f_s390.addStep(Git(repourl="git://repo.or.cz/qemu/agraf.git", branch="s390-next", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_repoorcz_lock.access('exclusive')]))
f_s390.addStep(Configure(command="./configure", env={'LANG': 'C'}))
f_s390.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

# agraf / ppc-next
f_ppc = factory.BuildFactory()
f_ppc.addStep(Git(repourl="git://repo.or.cz/qemu/agraf.git", branch="ppc-next", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_repoorcz_lock.access('exclusive')]))
f_ppc.addStep(Configure(command="./configure", env={'LANG': 'C'}))
f_ppc.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

# agraf / xen-next
f_xen_next = factory.BuildFactory()
f_xen_next.addStep(Git(repourl="git://repo.or.cz/qemu/agraf.git", branch="xen-next", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_repoorcz_lock.access('exclusive')]))
f_xen_next.addStep(Configure(command="./configure", env={'LANG': 'C'}))
f_xen_next.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

# mingw32 build (based on Gerd Hoffmann's buildbot config)
f_mingw32 = factory.BuildFactory()
f_mingw32.addStep(Git(repourl="git://git.qemu-project.org/qemu.git", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_qemuorg_lock.access('exclusive')]))
f_mingw32.addStep(Configure(command=["./configure", "--cross-prefix=i686-pc-mingw32-"], env={'LANG': 'C'}))
f_mingw32.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

# openbsd build (based on Gerd Hoffmann's buildbot config)
f_openbsd = factory.BuildFactory()
f_openbsd.addStep(Git(repourl="git://git.qemu-project.org/qemu.git", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_qemuorg_lock.access('exclusive')]))
f_openbsd.addStep(ShellCommand(command=["./configure", "--extra-cflags=-Wno-redundant-decls"], env={'LANG': 'C'}))
f_openbsd.addStep(Compile(command=["gmake", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

# xen40 branches
f_xen40 = factory.BuildFactory()
f_xen40.addStep(Git(repourl="git://git.qemu-project.org/qemu.git", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_qemuorg_lock.access('exclusive')]))
f_xen40.addStep(Configure(command="./configure --enable-xen --extra-cflags=-I/home/build/install/xen-4.0.x/include/ --extra-ldflags=-L/home/build/install/xen-4.0.x/lib64/", env={'LANG': 'C'}))
f_xen40.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

# xen41 branches
f_xen41 = factory.BuildFactory()
f_xen41.addStep(Git(repourl="git://git.qemu-project.org/qemu.git", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_qemuorg_lock.access('exclusive')]))
f_xen41.addStep(Configure(command="./configure --enable-xen --extra-cflags=-I/home/build/install/xen-4.1.x/include/ --extra-ldflags=-L/home/build/install/xen-4.1.x/lib64/", env={'LANG': 'C'}))
f_xen41.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

# xen42 branches
f_xen42 = factory.BuildFactory()
f_xen42.addStep(Git(repourl="git://git.qemu-project.org/qemu.git", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_qemuorg_lock.access('exclusive')]))
f_xen42.addStep(Configure(command="./configure --enable-xen --extra-cflags=-I/home/build/install/xen-4.2.x/include/ --extra-ldflags=-L/home/build/install/xen-4.2.x/lib/", env={'LANG': 'C'}))
f_xen42.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

# xen_unstable branches
f_xen_unstable = factory.BuildFactory()
f_xen_unstable.addStep(Git(repourl="git://git.qemu-project.org/qemu.git", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_qemuorg_lock.access('exclusive')]))
f_xen_unstable.addStep(Configure(command="./configure --enable-xen --extra-cflags=-I/home/build/install/xen-unstable/include/ --extra-ldflags=-L/home/build/install/xen-unstable/lib/", env={'LANG': 'C'}))
f_xen_unstable.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

# macosx build (based on Gerd Hoffmann's buildbot config)
f_macosx = factory.BuildFactory()
f_macosx.addStep(Git(repourl="git://git.qemu-project.org/qemu.git", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_qemuorg_lock.access('exclusive')]))
f_macosx.addStep(Configure(command=["./configure", "--prefix=/sw"], env={'LANG': 'C'}))
f_macosx.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

# linaro qemu-arm / target-arm.next
f_arm_target = factory.BuildFactory()
f_arm_target.addStep(Git(repourl="git://git.linaro.org/people/pmaydell/qemu-arm.git", branch="target-arm.next", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_linaro_lock.access('exclusive')]))
f_arm_target.addStep(Configure(command="./configure", env={'LANG': 'C'}))
f_arm_target.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

# linaro qemu-arm / arm-devs.next
f_arm_devs = factory.BuildFactory()
f_arm_devs.addStep(Git(repourl="git://git.linaro.org/people/pmaydell/qemu-arm.git", branch="arm-devs.next", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_linaro_lock.access('exclusive')]))
f_arm_devs.addStep(Configure(command="./configure", env={'LANG': 'C'}))
f_arm_devs.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))

# afaerber qemu-cpu / qom-cpu
f_afaerber = factory.BuildFactory()
f_afaerber.addStep(Git(repourl="git://github.com/afaerber/qemu-cpu.git", branch="qom-cpu", timeout=2400, mode='copy', retry=(5 * 60, 3), locks=[git_fetch_github_lock.access('exclusive')]))
f_afaerber.addStep(Configure(command="./configure", env={'LANG': 'C'}))
f_afaerber.addStep(Compile(command=["make", "CFLAGS=-O2"], env={'LANG': 'C'}, timeout=2400))


#####################################################################
# BUILDERS


builders = []

builders.append({
  'name': 'default_s390',
  'slavenames': bots_s390,
  'builddir': 'default_s390',
  'locks': [slow_lock],
  'factory': f_default
})

builders.append({
  'name': 'default_ppc',
  'slavenames': bots_ppc,
  'builddir': 'default_ppc',
  'locks': [slow_lock],
  'factory': f_default
})

builders.append({
  'name': 'default_solaris11express_sparc',
  'slavenames': bots_solaris11express_sparc,
  'builddir': 'default_solaris11express_sparc',
  'locks': [slow_lock],
  'factory': f_default
})

# debain_6_0
builders.append({
  'name': 'default_x86_64_debian_6_0',
  'slavenames': bots_x86_64_debian_6_0,
  'builddir': 'default_x86_64_debian_6_0',
  'locks': [slow_lock],
  'factory': f_default
})

# rhel61 
builders.append({
  'name': 'default_x86_64_rhel61',
  'slavenames': bots_x86_64_rhel61,
  'builddir': 'default_x86_64_rhel61',
  'locks': [slow_lock],
  'factory': f_default
})

builders.append({
  'name': 'default_i386_rhel61',
  'slavenames': bots_i386_rhel61,
  'builddir': 'default_i386_rhel61',
  'locks': [slow_lock],
  'factory': f_default
})

# rhel5
builders.append({
  'name': 'default_x86_64_rhel5',
  'slavenames': bots_x86_64_rhel5,
  'builddir': 'default_x86_64_rhel5',
  'locks': [slow_lock],
  'factory': f_default
})

# fedora16
builders.append({
  'name': 'default_x86_64_fedora16',
  'slavenames': bots_x86_64_fedora16,
  'builddir': 'default_x86_64_fedora16',
  'locks': [slow_lock],
  'factory': f_default
})

builders.append({
  'name': 'default_i386_debian_6_0',
  'slavenames': bots_i386_debian_6_0,
  'builddir': 'default_i386_debian_6_0',
  'locks': [slow_lock],
  'factory': f_default
})

# OpenBSD current
builders.append({
  'name': 'default_openbsd_current',
  'slavenames': bots_openbsd_current,
  'builddir': 'default_openbsd_current',
  'locks': [slow_lock],
  'factory': f_openbsd
})

# OpenBSD 4.9 
builders.append({
  'name': 'default_openbsd_4.9',
  'slavenames': bots_openbsd49,
  'builddir': 'default_openbsd_4.9',
  'locks': [slow_lock],
  'factory': f_openbsd
})

# MinGW32 
builders.append({
  'name': 'default_mingw32',
  'slavenames': bots_mingw32,
  'builddir': 'default_mingw32',
  'locks': [slow_lock],
  'factory': f_mingw32
})

# macosx 
builders.append({
  'name': 'default_i386_macosx',
  'slavenames': bots_macosx,
  'builddir': 'default_i386_macosx',
  'locks': [slow_lock],
  'factory': f_macosx
})

# arm branches / linaro 
builders.append({
  'name': 'default_arm_devs_next',
  'slavenames': bots_arm,
  'builddir': 'default_arm_devs_next',
  'locks': [slow_lock],
  'factory': f_arm_devs
})


# arm branches / linaro 
builders.append({
  'name': 'default_target_arm_next',
  'slavenames': bots_arm,
  'builddir': 'default_target_arm_next',
  'locks': [slow_lock],
  'factory': f_arm_target
})


## disable-kvm Builders

builders.append({
  'name': 'disable_kvm_x86_64_debian_6_0',
  'slavenames': bots_x86_64_debian_6_0,
  'builddir': 'disable_kvm_x86_64_debian_6_0',
  'locks': [slow_lock],
  'factory': f_disable_kvm
})

builders.append({
  'name': 'disable_kvm_i386_debian_6_0',
  'slavenames': bots_i386_debian_6_0,
  'builddir': 'disable_kvm_i386_debian_6_0',
  'locks': [slow_lock],
  'factory': f_disable_kvm
})


## block Builders
builders.append({
  'name': 'block_x86_64_debian_6_0',
  'slavenames': bots_x86_64_debian_6_0,
  'builddir': 'block_x86_64_debian_6_0',
  'locks': [slow_lock],
  'factory': f_block
})

builders.append({
  'name': 'block_i386_debian_6_0',
  'slavenames': bots_i386_debian_6_0,
  'builddir': 'block_i386_debian_6_0',
  'locks': [slow_lock],
  'factory': f_block
})

builders.append({
  'name': 'block_openbsd_current',
  'slavenames': bots_openbsd_current,
  'builddir': 'block_openbsd_current',
  'locks': [slow_lock],
  'factory': f_block_openbsd
})

builders.append({
  'name': 'block_openbsd_4.9',
  'slavenames': bots_openbsd49,
  'builddir': 'block_openbsd_4.9',
  'locks': [slow_lock],
  'factory': f_block_openbsd
})

builders.append({
  'name': 'block_mingw32',
  'slavenames': bots_mingw32,
  'builddir': 'block_mingw32',
  'locks': [slow_lock],
  'factory': f_block_mingw32
})

## pci Builders
builders.append({
  'name': 'pci_x86_64_debian_6_0',
  'slavenames': bots_x86_64_debian_6_0,
  'builddir': 'pci_x86_64_debian_6_0',
  'locks': [slow_lock],
  'factory': f_pci
})

builders.append({
  'name': 'pci_i386_debian_6_0',
  'slavenames': bots_i386_debian_6_0,
  'builddir': 'pci_i386_debian_6_0',
  'locks': [slow_lock],
  'factory': f_pci
})

## virtfs Builders
builders.append({
  'name': 'virtfs_x86_64_debian_6_0',
  'slavenames': bots_x86_64_debian_6_0,
  'builddir': 'virtfs_x86_64_debian_6_0',
  'locks': [slow_lock],
  'factory': f_virtfs
})

builders.append({
  'name': 'virtfs_i386_debian_6_0',
  'slavenames': bots_i386_debian_6_0,
  'builddir': 'virtfs_i386_debian_6_0',
  'locks': [slow_lock],
  'factory': f_virtfs
})


## qmp Builders
builders.append({
  'name': 'qmp_x86_64_debian_6_0',
  'slavenames': bots_x86_64_debian_6_0,
  'builddir': 'qmp_x86_64_debian_6_0',
  'locks': [slow_lock],
  'factory': f_qmp
})

builders.append({
  'name': 'qmp_i386_debian_6_0',
  'slavenames': bots_i386_debian_6_0,
  'builddir': 'qmp_i386_debian_6_0',
  'locks': [slow_lock],
  'factory': f_qmp
})

### monitor Builders
#builders.append({
#  'name': 'monitor_x86_64_debian_6_0',
#  'slavenames': bots_x86_64_debian_6_0,
#  'builddir': 'monitor_x86_64_debian_6_0',
#  'locks': [slow_lock],
#  'factory': f_monitor
#})
#
#builders.append({
#  'name': 'monitor_i386_debian_6_0',
#  'slavenames': bots_i386_debian_6_0,
#  'builddir': 'monitor_i386_debian_6_0',
#  'locks': [slow_lock],
#  'factory': f_monitor
#})

## trivial-patches Builders
builders.append({
  'name': 'trivial-patches_x86_64_debian_6_0',
  'slavenames': bots_x86_64_debian_6_0,
  'builddir': 'trivial-patches_x86_64_debian_6_0',
  'locks': [slow_lock],
  'factory': f_trivialp
})

builders.append({
  'name': 'trivial-patches_i386_debian_6_0',
  'slavenames': bots_i386_debian_6_0,
  'builddir': 'trivial-patches_i386_debian_6_0',
  'locks': [slow_lock],
  'factory': f_trivialp
})

## xen-next Builders
builders.append({
  'name': 'xen_x86_64_debian_6_0',
  'slavenames': bots_x86_64_debian_6_0,
  'builddir': 'xen_x86_64_debian_6_0',
  'locks': [slow_lock],
  'factory': f_xen_next
})

builders.append({
  'name': 'xen_i386_debian_6_0',
  'slavenames': bots_i386_debian_6_0,
  'builddir': 'xen_i386_debian_6_0',
  'locks': [slow_lock],
  'factory': f_xen_next
})

## xen40 Builders
builders.append({
  'name': 'xen40',
  'slavenames': bots_xen40,
  'builddir': 'xen40',
  'locks': [slow_lock],
  'factory': f_xen40
})

## xen41 Builders
builders.append({
  'name': 'xen41',
  'slavenames': bots_xen41,
  'builddir': 'xen41',
  'locks': [slow_lock],
  'factory': f_xen41
})

## xen42 Builders
builders.append({
  'name': 'xen42',
  'slavenames': bots_xen42,
  'builddir': 'xen42',
  'locks': [slow_lock],
  'factory': f_xen42
})

## xen_unstable Builders
builders.append({
  'name': 'xen_unstable',
  'slavenames': bots_xen_unstable,
  'builddir': 'xen_unstable',
  'locks': [slow_lock],
  'factory': f_xen_unstable
})

## s390-next Builders
builders.append({
  'name': 's390-next_x86_64_debian_6_0',
  'slavenames': bots_x86_64_debian_6_0,
  'builddir': 's390-next_x86_64_debian_6_0',
  'locks': [slow_lock],
  'factory': f_s390
})

builders.append({
  'name': 's390-next_i386_debian_6_0',
  'slavenames': bots_i386_debian_6_0,
  'builddir': 's390-next_i386_debian_6_0',
  'locks': [slow_lock],
  'factory': f_s390
})

## ppc-next Builders
builders.append({
  'name': 'ppc-next_x86_64_debian_6_0',
  'slavenames': bots_x86_64_debian_6_0,
  'builddir': 'ppc-next_x86_64_debian_6_0',
  'locks': [slow_lock],
  'factory': f_ppc
})

builders.append({
  'name': 'ppc-next_i386_debian_6_0',
  'slavenames': bots_i386_debian_6_0,
  'builddir': 'ppc-next_i386_debian_6_0',
  'locks': [slow_lock],
  'factory': f_ppc
})




## out of tree builders
### this should be arch and distro indepedent issues
### just use all slaves for that
#### But maybe arch dependent?!

builders.append({
  'name': 'default_x86_64_out_of_tree',
  'slavenames': bots_x86_64,
  'builddir': 'default_x86_64_out_of_tree',
  'locks': [slow_lock],
  'factory': f_out_of_tree_default
})


builders.append({
  'name': 'default_i386_out_of_tree',
  'slavenames': bots_i386,
  'builddir': 'default_i386_out_of_tree',
  'locks': [slow_lock],
  'factory': f_out_of_tree_default
})


builders.append({
  'name': 'disable_kvm_x86_64_out_of_tree',
  'slavenames': bots_x86_64,
  'builddir': 'disable_kvm_x86_64_out_of_tree',
  'locks': [slow_lock],
  'factory': f_out_of_tree_disable_kvm
})


builders.append({
  'name': 'disable_kvm_i386_out_of_tree',
  'slavenames': bots_i386,
  'builddir': 'disable_kvm_i386_out_of_tree',
  'locks': [slow_lock],
  'factory': f_out_of_tree_disable_kvm
})

c['builders'] = builders
